#include <iostream>

#include <ctime>

// Eigen core
#include <eigen3/Eigen/Core>
// Algebraic operations of dense matrices (inverse, eigenvalues, etc)
#include <eigen3/Eigen/Dense>

#define MATRIX_SIZE 50

int main(int argc, char* argv[])
{
    /* All vectors and matrices in Eigen are Eigen::Matrix, which is a template
     class. Its first three parameters are: data type, row, column. */
    /* Declare a 2x3 float matrix */
    Eigen::Matrix<float, 2, 3> matrix_23;

    Eigen::Vector3d v_3d;
    Eigen::Matrix<float, 3, 1> vd_3d;

    /* Matrix3d == Matrix<double, 3, 3> */
    Eigen::Matrix3d matrix_33 = Eigen::Matrix3d::Zero();
    
    /* matrix of dynamic size */
    Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> matrix_dynamic;

    Eigen::MatrixXd matrix_x;

    /* initialization */
    matrix_23 << 1, 2, 3, 4, 5, 6;
    std::cout << "matrix 2x3 from 1 to 6: \n" << matrix_23 << "\n";

    /* Use () to access elements in the matrix */
    std::cout << "print matrix 2x3: \n";
    for (int i = 0; i < 2; ++i)
    {
        for (int j = 0; j < 3; ++j)
        {
            std::cout << matrix_23(i, j) << "\t";
        }
        std::cout << "\n";
    }

    /* We can easily multiply a matrix with a vector 
        (but they are actually still matrices). */
    v_3d << 3, 2, 1;
    vd_3d << 4, 5, 6;

    /* In Eigen you can't mix two different types of matrices, 
        like this is wrong
        Matrix<double, 2, 1> result_wrong_type = matrix_23 * v_3d; 
        It should be explicityly converted. */
    Eigen::Matrix<double, 2, 1> result = matrix_23.cast<double>() * v_3d;
    std::cout << "[1, 2, 3; 4, 5, 6] * [3, 2, 1] = " << result.transpose() << "\n";

    Eigen::Matrix<float, 2, 1> result2 = matrix_23 * vd_3d;
    std::cout << "[1, 2, 3; 4, 5, 6] * [4, 5, 6] = " << result2.transpose() << "\n";

    /* Also you can't misjudge the dimensions of the matrix. */
    // Eigen::Matrix<double, 2, 3> result_wrong_dimension = matrix_23.cast<double>() * v_3d;

    /* Some matrix operations 
        The basic operations are not demonstrated, just use + - * / operators */
    matrix_33 = Eigen::Matrix3d::Random(); // Random number matrix
    std::cout << "random matrix: \n" << matrix_33 << "\n";
    std::cout << "transpose: \n" << matrix_33.transpose() << "\n";
    std::cout << "sum: \n" << matrix_33.sum() << "\n";
    std::cout << "trace: \n" << matrix_33.trace() << "\n";
    std::cout << "times 10: \n" << 10 * matrix_33 << "\n";
    std::cout << "inverse: \n" << matrix_33.inverse() << "\n";
    std::cout << "det: \n" << matrix_33.determinant() << "\n";

    /* Eigen values
        Real symmetric matrix can guarantee successful diagonalization */
    Eigen::SelfAdjointEigenSolver<Eigen::Matrix3d> eigen_solver(matrix_33.transpose() * matrix_33);
    std::cout << "Eigen values = \n" << eigen_solver.eigenvalues() << "\n";
    std::cout << "Eigen vectors = \n" << eigen_solver.eigenvectors() << "\n";

    /* Solving equation 
        We solve the equation of matrix_NN * x = v_Nd 
        The size of N is defined in the previos macro, which is generated by a 
        random number Direct inversion is the most direct, but the amount of 
        inverse operation is large. */
    Eigen::Matrix<double, MATRIX_SIZE, MATRIX_SIZE> matrix_NN = Eigen::MatrixXd::Random(MATRIX_SIZE, MATRIX_SIZE);
    // Guarantee semi-positive definite
    matrix_NN = matrix_NN * matrix_NN.transpose();
    Eigen::Matrix<double, MATRIX_SIZE, 1> v_Nd = Eigen::MatrixXd::Random(MATRIX_SIZE, 1);

    /* timing */
    clock_t time_stt = clock();

    /* Direct inversion */
    Eigen::Matrix<double, MATRIX_SIZE, 1> x = matrix_NN.inverse() * v_Nd;
    std::cout << "time of normal inverse is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms\nA";

    /* Usually solved by matrix decomposition, such as QR decomposition, the speed is much faster */
    time_stt = clock();
    x = matrix_NN.colPivHouseholderQr().solve(v_Nd);
    std::cout << "time of Qr decomposition is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms\n";
    std::cout << "x = " << x.transpose() << "\n";

    /* For positive definite matrices, you can alos use cholesky decomposition to solve equations */
    time_stt = clock();
    x = matrix_NN.ldlt().solve(v_Nd);
    std::cout << "time of ldlt decomposition is " << 1000 * (clock() - time_stt) / (double)CLOCKS_PER_SEC << "ms\n";
    std::cout << "x = " << x.transpose() << "\n";

    return 0;
}